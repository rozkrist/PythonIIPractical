1. **Basic SQL:**

   - Task: Retrieve all columns from the "employees" table. - SELECT * FROM employees;
   - Task: Find the names and ages of all employees whose age is above 30. - SELECT * FROM employees WHERE age >=30;
   - Task: List the unique cities in the "customers" table. - SELECT DISTINCT city FROM customers;
   - Task: Calculate the total number of orders in the "orders" table. - SELECT SUM(order_total) FROM orders;
   - Task: Find the average price of all products in the "products" table. - SELECT AVG(price) FROM products;



2. **SQL Grouping:**

   - Task: Calculate the total sales amount for each product in the "sales" table. - SELECT SUM(revenue) AS total_sum FROM sales;
   - Task: Find the number of customers in each city from the "customers" table. - 
     SELECT COUNT(customer_id), city
     FROM customers
     GROUP BY city;

   - Task: Calculate the average salary for each department in the "employees" table. -
     SELECT department, ROUND(AVG(salary)) AS avg_salary 
     FROM employees 
     Group BY department;

   - Task: List the highest and lowest prices for each category in the "products" table. - 
     SELECT product_id , MAX(price) AS max_price, MIN(price) AS min_price 
     FROM products 
     GROUP BY category;

   - Task: Find the number of orders placed by each customer in the "orders" table. -
     SELECT customer_id, Count(*) AS order_count 
     From orders
     Group BY customer_id;


3. **SQL Aggregation:**

   - Task: Calculate the total revenue generated by the company from the "sales" table. - SELECT SUM(revenue) AS total_sum FROM sales;

   - Task: Find the highest salary among all employees in the "employees" table. - SELECT MAX(salary) AS max_value
     FROM employees;

   - Task: Calculate the average age of employees in the "employees" table. - SELECT ROUND(AVG(age)) AS average_value 
     FROM employees;

   - Task: Determine the number of distinct products in the "products" table. - SELECT COUNT(DISTINCT product_name) AS distinct_values
     FROM products;

   - Task: Calculate the total quantity sold for each product in the "sales" table. - SELECT SUM(quantity) AS total_sum
     FROM sales;


4. **Advanced SQL:**

   - Task: Retrieve the top 5 employees with the highest salaries from the "employees" table. - SELECT * FROM employees ORDER BY salary DESC LIMIT 5;
   - Task: Find the names of all customers who have placed orders in the "customers" table. - 
     SELECT orders.order_id, customers.customer_name
     FROM orders, customers
     WHERE orders.customer_id = customers.customer_id; 

   - Task: Calculate the running total sales for each month in the "sales" table. - 
     SELECT year(sale_date),month(sale_date),sum(quantity)
     FROM sales
     GROUP BY year(sale_date),month(sale_date)
     ORDER BY year(sale_date),month(sale_date);

   - Task: Determine the average sales amount over a 3-month sliding window for each product in the "sales" table. - NOT DONE

   - Task: Rank customers based on their total order amounts in the "orders" table. - 
        SELECT customer_id, SUM(order_total) as rank_value
        FROM orders 
        GROUP BY customer_id
        ORDER BY rank_value desc; --> something is missing in this query as not working as expected as rank_value I would want to see not as order_total amounts, but 1,2,3,4...


5. **Window Functions in SQL:**

   - Task: Calculate the cumulative sum of revenue for each product in the "sales" table. - 
    SELECT product_id, quantity, revenue, 
    SUM(quantity) OVER (PARTITION BY product_id ORDER BY revenue 
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_sum 
    FROM sales;

   - Task: Find the moving average of prices for each product over a 5-day window in the "products" table. - 
     SELECT product_id, product_name, price,
     ROUND(AVG(price) OVER (PARTITION BY product_id ORDER BY Product_name 
     ROWS BETWEEN 5 PRECEDING AND CURRENT ROW)) AS moving_avg 
     FROM products;

   - Task: Assign percentile ranks to employees based on their salaries in the "employees" table. - 
     SELECT employee_name, salary, 
     ROUND(PERCENT_RANK() OVER (ORDER BY salary),2) percentile_rank 
     FROM employees;
  
   - Task: Retrieve the previous salary for each employee in the "employees" table, considering 0 as the default value for the first row. - NOT DONE

   - Task: Calculate the sum of revenue for each product within a 2-day window, including the current row, in the "sales" table. - 
     SELECT product_id, quantity, revenue,
     SUM(revenue) OVER (PARTITION BY product_id ORDER BY quantity 
     ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS sum_revenue 
     FROM sales;


